/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LearningModuleService } from "../learningModule.service";
import { LearningModuleCreateInput } from "./LearningModuleCreateInput";
import { LearningModule } from "./LearningModule";
import { LearningModuleFindManyArgs } from "./LearningModuleFindManyArgs";
import { LearningModuleWhereUniqueInput } from "./LearningModuleWhereUniqueInput";
import { LearningModuleUpdateInput } from "./LearningModuleUpdateInput";

export class LearningModuleControllerBase {
  constructor(protected readonly service: LearningModuleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LearningModule })
  async createLearningModule(
    @common.Body() data: LearningModuleCreateInput
  ): Promise<LearningModule> {
    return await this.service.createLearningModule({
      data: data,
      select: {
        content: true,
        createdAt: true,
        createdBy: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LearningModule] })
  @ApiNestedQuery(LearningModuleFindManyArgs)
  async learningModules(
    @common.Req() request: Request
  ): Promise<LearningModule[]> {
    const args = plainToClass(LearningModuleFindManyArgs, request.query);
    return this.service.learningModules({
      ...args,
      select: {
        content: true,
        createdAt: true,
        createdBy: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LearningModule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async learningModule(
    @common.Param() params: LearningModuleWhereUniqueInput
  ): Promise<LearningModule | null> {
    const result = await this.service.learningModule({
      where: params,
      select: {
        content: true,
        createdAt: true,
        createdBy: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LearningModule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLearningModule(
    @common.Param() params: LearningModuleWhereUniqueInput,
    @common.Body() data: LearningModuleUpdateInput
  ): Promise<LearningModule | null> {
    try {
      return await this.service.updateLearningModule({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          createdBy: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LearningModule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLearningModule(
    @common.Param() params: LearningModuleWhereUniqueInput
  ): Promise<LearningModule | null> {
    try {
      return await this.service.deleteLearningModule({
        where: params,
        select: {
          content: true,
          createdAt: true,
          createdBy: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
