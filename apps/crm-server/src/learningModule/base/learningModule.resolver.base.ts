/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LearningModule } from "./LearningModule";
import { LearningModuleCountArgs } from "./LearningModuleCountArgs";
import { LearningModuleFindManyArgs } from "./LearningModuleFindManyArgs";
import { LearningModuleFindUniqueArgs } from "./LearningModuleFindUniqueArgs";
import { CreateLearningModuleArgs } from "./CreateLearningModuleArgs";
import { UpdateLearningModuleArgs } from "./UpdateLearningModuleArgs";
import { DeleteLearningModuleArgs } from "./DeleteLearningModuleArgs";
import { LearningModuleService } from "../learningModule.service";
@graphql.Resolver(() => LearningModule)
export class LearningModuleResolverBase {
  constructor(protected readonly service: LearningModuleService) {}

  async _learningModulesMeta(
    @graphql.Args() args: LearningModuleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LearningModule])
  async learningModules(
    @graphql.Args() args: LearningModuleFindManyArgs
  ): Promise<LearningModule[]> {
    return this.service.learningModules(args);
  }

  @graphql.Query(() => LearningModule, { nullable: true })
  async learningModule(
    @graphql.Args() args: LearningModuleFindUniqueArgs
  ): Promise<LearningModule | null> {
    const result = await this.service.learningModule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LearningModule)
  async createLearningModule(
    @graphql.Args() args: CreateLearningModuleArgs
  ): Promise<LearningModule> {
    return await this.service.createLearningModule({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LearningModule)
  async updateLearningModule(
    @graphql.Args() args: UpdateLearningModuleArgs
  ): Promise<LearningModule | null> {
    try {
      return await this.service.updateLearningModule({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LearningModule)
  async deleteLearningModule(
    @graphql.Args() args: DeleteLearningModuleArgs
  ): Promise<LearningModule | null> {
    try {
      return await this.service.deleteLearningModule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
