/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BoardMember as PrismaBoardMember } from "@prisma/client";

export class BoardMemberServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BoardMemberCountArgs, "select">
  ): Promise<number> {
    return this.prisma.boardMember.count(args);
  }

  async boardMembers<T extends Prisma.BoardMemberFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardMemberFindManyArgs>
  ): Promise<PrismaBoardMember[]> {
    return this.prisma.boardMember.findMany<Prisma.BoardMemberFindManyArgs>(
      args
    );
  }
  async boardMember<T extends Prisma.BoardMemberFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardMemberFindUniqueArgs>
  ): Promise<PrismaBoardMember | null> {
    return this.prisma.boardMember.findUnique(args);
  }
  async createBoardMember<T extends Prisma.BoardMemberCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardMemberCreateArgs>
  ): Promise<PrismaBoardMember> {
    return this.prisma.boardMember.create<T>(args);
  }
  async updateBoardMember<T extends Prisma.BoardMemberUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardMemberUpdateArgs>
  ): Promise<PrismaBoardMember> {
    return this.prisma.boardMember.update<T>(args);
  }
  async deleteBoardMember<T extends Prisma.BoardMemberDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardMemberDeleteArgs>
  ): Promise<PrismaBoardMember> {
    return this.prisma.boardMember.delete(args);
  }
}
