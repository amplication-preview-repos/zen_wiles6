/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BoardMeeting } from "./BoardMeeting";
import { BoardMeetingCountArgs } from "./BoardMeetingCountArgs";
import { BoardMeetingFindManyArgs } from "./BoardMeetingFindManyArgs";
import { BoardMeetingFindUniqueArgs } from "./BoardMeetingFindUniqueArgs";
import { CreateBoardMeetingArgs } from "./CreateBoardMeetingArgs";
import { UpdateBoardMeetingArgs } from "./UpdateBoardMeetingArgs";
import { DeleteBoardMeetingArgs } from "./DeleteBoardMeetingArgs";
import { BoardMeetingService } from "../boardMeeting.service";
@graphql.Resolver(() => BoardMeeting)
export class BoardMeetingResolverBase {
  constructor(protected readonly service: BoardMeetingService) {}

  async _boardMeetingsMeta(
    @graphql.Args() args: BoardMeetingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BoardMeeting])
  async boardMeetings(
    @graphql.Args() args: BoardMeetingFindManyArgs
  ): Promise<BoardMeeting[]> {
    return this.service.boardMeetings(args);
  }

  @graphql.Query(() => BoardMeeting, { nullable: true })
  async boardMeeting(
    @graphql.Args() args: BoardMeetingFindUniqueArgs
  ): Promise<BoardMeeting | null> {
    const result = await this.service.boardMeeting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BoardMeeting)
  async createBoardMeeting(
    @graphql.Args() args: CreateBoardMeetingArgs
  ): Promise<BoardMeeting> {
    return await this.service.createBoardMeeting({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BoardMeeting)
  async updateBoardMeeting(
    @graphql.Args() args: UpdateBoardMeetingArgs
  ): Promise<BoardMeeting | null> {
    try {
      return await this.service.updateBoardMeeting({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BoardMeeting)
  async deleteBoardMeeting(
    @graphql.Args() args: DeleteBoardMeetingArgs
  ): Promise<BoardMeeting | null> {
    try {
      return await this.service.deleteBoardMeeting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
