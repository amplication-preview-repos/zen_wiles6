/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GeneralMeetingService } from "../generalMeeting.service";
import { GeneralMeetingCreateInput } from "./GeneralMeetingCreateInput";
import { GeneralMeeting } from "./GeneralMeeting";
import { GeneralMeetingFindManyArgs } from "./GeneralMeetingFindManyArgs";
import { GeneralMeetingWhereUniqueInput } from "./GeneralMeetingWhereUniqueInput";
import { GeneralMeetingUpdateInput } from "./GeneralMeetingUpdateInput";

export class GeneralMeetingControllerBase {
  constructor(protected readonly service: GeneralMeetingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GeneralMeeting })
  async createGeneralMeeting(
    @common.Body() data: GeneralMeetingCreateInput
  ): Promise<GeneralMeeting> {
    return await this.service.createGeneralMeeting({
      data: data,
      select: {
        agenda: true,
        createdAt: true,
        description: true,
        endTime: true,
        id: true,
        location: true,
        meetingType: true,
        minutes: true,
        startTime: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GeneralMeeting] })
  @ApiNestedQuery(GeneralMeetingFindManyArgs)
  async generalMeetings(
    @common.Req() request: Request
  ): Promise<GeneralMeeting[]> {
    const args = plainToClass(GeneralMeetingFindManyArgs, request.query);
    return this.service.generalMeetings({
      ...args,
      select: {
        agenda: true,
        createdAt: true,
        description: true,
        endTime: true,
        id: true,
        location: true,
        meetingType: true,
        minutes: true,
        startTime: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GeneralMeeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async generalMeeting(
    @common.Param() params: GeneralMeetingWhereUniqueInput
  ): Promise<GeneralMeeting | null> {
    const result = await this.service.generalMeeting({
      where: params,
      select: {
        agenda: true,
        createdAt: true,
        description: true,
        endTime: true,
        id: true,
        location: true,
        meetingType: true,
        minutes: true,
        startTime: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GeneralMeeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGeneralMeeting(
    @common.Param() params: GeneralMeetingWhereUniqueInput,
    @common.Body() data: GeneralMeetingUpdateInput
  ): Promise<GeneralMeeting | null> {
    try {
      return await this.service.updateGeneralMeeting({
        where: params,
        data: data,
        select: {
          agenda: true,
          createdAt: true,
          description: true,
          endTime: true,
          id: true,
          location: true,
          meetingType: true,
          minutes: true,
          startTime: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GeneralMeeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGeneralMeeting(
    @common.Param() params: GeneralMeetingWhereUniqueInput
  ): Promise<GeneralMeeting | null> {
    try {
      return await this.service.deleteGeneralMeeting({
        where: params,
        select: {
          agenda: true,
          createdAt: true,
          description: true,
          endTime: true,
          id: true,
          location: true,
          meetingType: true,
          minutes: true,
          startTime: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
