/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Mentor as PrismaMentor,
  Member as PrismaMember,
} from "@prisma/client";

export class MentorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MentorCountArgs, "select">): Promise<number> {
    return this.prisma.mentor.count(args);
  }

  async mentors<T extends Prisma.MentorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MentorFindManyArgs>
  ): Promise<PrismaMentor[]> {
    return this.prisma.mentor.findMany<Prisma.MentorFindManyArgs>(args);
  }
  async mentor<T extends Prisma.MentorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MentorFindUniqueArgs>
  ): Promise<PrismaMentor | null> {
    return this.prisma.mentor.findUnique(args);
  }
  async createMentor<T extends Prisma.MentorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MentorCreateArgs>
  ): Promise<PrismaMentor> {
    return this.prisma.mentor.create<T>(args);
  }
  async updateMentor<T extends Prisma.MentorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MentorUpdateArgs>
  ): Promise<PrismaMentor> {
    return this.prisma.mentor.update<T>(args);
  }
  async deleteMentor<T extends Prisma.MentorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MentorDeleteArgs>
  ): Promise<PrismaMentor> {
    return this.prisma.mentor.delete(args);
  }

  async getMember(parentId: string): Promise<PrismaMember | null> {
    return this.prisma.mentor
      .findUnique({
        where: { id: parentId },
      })
      .member();
  }
}
