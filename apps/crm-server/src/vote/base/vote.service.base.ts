/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Vote as PrismaVote, Poll as PrismaPoll } from "@prisma/client";

export class VoteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VoteCountArgs, "select">): Promise<number> {
    return this.prisma.vote.count(args);
  }

  async votes<T extends Prisma.VoteFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoteFindManyArgs>
  ): Promise<PrismaVote[]> {
    return this.prisma.vote.findMany<Prisma.VoteFindManyArgs>(args);
  }
  async vote<T extends Prisma.VoteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoteFindUniqueArgs>
  ): Promise<PrismaVote | null> {
    return this.prisma.vote.findUnique(args);
  }
  async createVote<T extends Prisma.VoteCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoteCreateArgs>
  ): Promise<PrismaVote> {
    return this.prisma.vote.create<T>(args);
  }
  async updateVote<T extends Prisma.VoteUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoteUpdateArgs>
  ): Promise<PrismaVote> {
    return this.prisma.vote.update<T>(args);
  }
  async deleteVote<T extends Prisma.VoteDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VoteDeleteArgs>
  ): Promise<PrismaVote> {
    return this.prisma.vote.delete(args);
  }

  async getPoll(parentId: string): Promise<PrismaPoll | null> {
    return this.prisma.vote
      .findUnique({
        where: { id: parentId },
      })
      .poll();
  }
}
