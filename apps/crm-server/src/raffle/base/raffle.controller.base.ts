/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RaffleService } from "../raffle.service";
import { RaffleCreateInput } from "./RaffleCreateInput";
import { Raffle } from "./Raffle";
import { RaffleFindManyArgs } from "./RaffleFindManyArgs";
import { RaffleWhereUniqueInput } from "./RaffleWhereUniqueInput";
import { RaffleUpdateInput } from "./RaffleUpdateInput";

export class RaffleControllerBase {
  constructor(protected readonly service: RaffleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Raffle })
  async createRaffle(@common.Body() data: RaffleCreateInput): Promise<Raffle> {
    return await this.service.createRaffle({
      data: data,
      select: {
        createdAt: true,
        description: true,
        drawDate: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Raffle] })
  @ApiNestedQuery(RaffleFindManyArgs)
  async raffles(@common.Req() request: Request): Promise<Raffle[]> {
    const args = plainToClass(RaffleFindManyArgs, request.query);
    return this.service.raffles({
      ...args,
      select: {
        createdAt: true,
        description: true,
        drawDate: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Raffle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async raffle(
    @common.Param() params: RaffleWhereUniqueInput
  ): Promise<Raffle | null> {
    const result = await this.service.raffle({
      where: params,
      select: {
        createdAt: true,
        description: true,
        drawDate: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Raffle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRaffle(
    @common.Param() params: RaffleWhereUniqueInput,
    @common.Body() data: RaffleUpdateInput
  ): Promise<Raffle | null> {
    try {
      return await this.service.updateRaffle({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          drawDate: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Raffle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRaffle(
    @common.Param() params: RaffleWhereUniqueInput
  ): Promise<Raffle | null> {
    try {
      return await this.service.deleteRaffle({
        where: params,
        select: {
          createdAt: true,
          description: true,
          drawDate: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
