/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BoardMeeting as PrismaBoardMeeting } from "@prisma/client";

export class BoardMeetingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BoardMeetingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.boardMeeting.count(args);
  }

  async boardMeetings<T extends Prisma.BoardMeetingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardMeetingFindManyArgs>
  ): Promise<PrismaBoardMeeting[]> {
    return this.prisma.boardMeeting.findMany<Prisma.BoardMeetingFindManyArgs>(
      args
    );
  }
  async boardMeeting<T extends Prisma.BoardMeetingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardMeetingFindUniqueArgs>
  ): Promise<PrismaBoardMeeting | null> {
    return this.prisma.boardMeeting.findUnique(args);
  }
  async createBoardMeeting<T extends Prisma.BoardMeetingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardMeetingCreateArgs>
  ): Promise<PrismaBoardMeeting> {
    return this.prisma.boardMeeting.create<T>(args);
  }
  async updateBoardMeeting<T extends Prisma.BoardMeetingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardMeetingUpdateArgs>
  ): Promise<PrismaBoardMeeting> {
    return this.prisma.boardMeeting.update<T>(args);
  }
  async deleteBoardMeeting<T extends Prisma.BoardMeetingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardMeetingDeleteArgs>
  ): Promise<PrismaBoardMeeting> {
    return this.prisma.boardMeeting.delete(args);
  }
}
