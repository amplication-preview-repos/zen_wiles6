/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WebPageService } from "../webPage.service";
import { WebPageCreateInput } from "./WebPageCreateInput";
import { WebPage } from "./WebPage";
import { WebPageFindManyArgs } from "./WebPageFindManyArgs";
import { WebPageWhereUniqueInput } from "./WebPageWhereUniqueInput";
import { WebPageUpdateInput } from "./WebPageUpdateInput";

export class WebPageControllerBase {
  constructor(protected readonly service: WebPageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WebPage })
  async createWebPage(
    @common.Body() data: WebPageCreateInput
  ): Promise<WebPage> {
    return await this.service.createWebPage({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WebPage] })
  @ApiNestedQuery(WebPageFindManyArgs)
  async webPages(@common.Req() request: Request): Promise<WebPage[]> {
    const args = plainToClass(WebPageFindManyArgs, request.query);
    return this.service.webPages({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WebPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async webPage(
    @common.Param() params: WebPageWhereUniqueInput
  ): Promise<WebPage | null> {
    const result = await this.service.webPage({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WebPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWebPage(
    @common.Param() params: WebPageWhereUniqueInput,
    @common.Body() data: WebPageUpdateInput
  ): Promise<WebPage | null> {
    try {
      return await this.service.updateWebPage({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WebPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWebPage(
    @common.Param() params: WebPageWhereUniqueInput
  ): Promise<WebPage | null> {
    try {
      return await this.service.deleteWebPage({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
