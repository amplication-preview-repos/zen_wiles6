/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GeneralMeeting } from "./GeneralMeeting";
import { GeneralMeetingCountArgs } from "./GeneralMeetingCountArgs";
import { GeneralMeetingFindManyArgs } from "./GeneralMeetingFindManyArgs";
import { GeneralMeetingFindUniqueArgs } from "./GeneralMeetingFindUniqueArgs";
import { CreateGeneralMeetingArgs } from "./CreateGeneralMeetingArgs";
import { UpdateGeneralMeetingArgs } from "./UpdateGeneralMeetingArgs";
import { DeleteGeneralMeetingArgs } from "./DeleteGeneralMeetingArgs";
import { GeneralMeetingService } from "../generalMeeting.service";
@graphql.Resolver(() => GeneralMeeting)
export class GeneralMeetingResolverBase {
  constructor(protected readonly service: GeneralMeetingService) {}

  async _generalMeetingsMeta(
    @graphql.Args() args: GeneralMeetingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GeneralMeeting])
  async generalMeetings(
    @graphql.Args() args: GeneralMeetingFindManyArgs
  ): Promise<GeneralMeeting[]> {
    return this.service.generalMeetings(args);
  }

  @graphql.Query(() => GeneralMeeting, { nullable: true })
  async generalMeeting(
    @graphql.Args() args: GeneralMeetingFindUniqueArgs
  ): Promise<GeneralMeeting | null> {
    const result = await this.service.generalMeeting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GeneralMeeting)
  async createGeneralMeeting(
    @graphql.Args() args: CreateGeneralMeetingArgs
  ): Promise<GeneralMeeting> {
    return await this.service.createGeneralMeeting({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GeneralMeeting)
  async updateGeneralMeeting(
    @graphql.Args() args: UpdateGeneralMeetingArgs
  ): Promise<GeneralMeeting | null> {
    try {
      return await this.service.updateGeneralMeeting({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GeneralMeeting)
  async deleteGeneralMeeting(
    @graphql.Args() args: DeleteGeneralMeetingArgs
  ): Promise<GeneralMeeting | null> {
    try {
      return await this.service.deleteGeneralMeeting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
