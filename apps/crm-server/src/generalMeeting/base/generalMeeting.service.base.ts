/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GeneralMeeting as PrismaGeneralMeeting } from "@prisma/client";

export class GeneralMeetingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GeneralMeetingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.generalMeeting.count(args);
  }

  async generalMeetings<T extends Prisma.GeneralMeetingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GeneralMeetingFindManyArgs>
  ): Promise<PrismaGeneralMeeting[]> {
    return this.prisma.generalMeeting.findMany<Prisma.GeneralMeetingFindManyArgs>(
      args
    );
  }
  async generalMeeting<T extends Prisma.GeneralMeetingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GeneralMeetingFindUniqueArgs>
  ): Promise<PrismaGeneralMeeting | null> {
    return this.prisma.generalMeeting.findUnique(args);
  }
  async createGeneralMeeting<T extends Prisma.GeneralMeetingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GeneralMeetingCreateArgs>
  ): Promise<PrismaGeneralMeeting> {
    return this.prisma.generalMeeting.create<T>(args);
  }
  async updateGeneralMeeting<T extends Prisma.GeneralMeetingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GeneralMeetingUpdateArgs>
  ): Promise<PrismaGeneralMeeting> {
    return this.prisma.generalMeeting.update<T>(args);
  }
  async deleteGeneralMeeting<T extends Prisma.GeneralMeetingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GeneralMeetingDeleteArgs>
  ): Promise<PrismaGeneralMeeting> {
    return this.prisma.generalMeeting.delete(args);
  }
}
