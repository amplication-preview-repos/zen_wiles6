/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BoardMeetingService } from "../boardMeeting.service";
import { BoardMeetingCreateInput } from "./BoardMeetingCreateInput";
import { BoardMeeting } from "./BoardMeeting";
import { BoardMeetingFindManyArgs } from "./BoardMeetingFindManyArgs";
import { BoardMeetingWhereUniqueInput } from "./BoardMeetingWhereUniqueInput";
import { BoardMeetingUpdateInput } from "./BoardMeetingUpdateInput";

export class BoardMeetingControllerBase {
  constructor(protected readonly service: BoardMeetingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BoardMeeting })
  async createBoardMeeting(
    @common.Body() data: BoardMeetingCreateInput
  ): Promise<BoardMeeting> {
    return await this.service.createBoardMeeting({
      data: data,
      select: {
        agenda: true,
        createdAt: true,
        description: true,
        endTime: true,
        id: true,
        location: true,
        minutes: true,
        startTime: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BoardMeeting] })
  @ApiNestedQuery(BoardMeetingFindManyArgs)
  async boardMeetings(@common.Req() request: Request): Promise<BoardMeeting[]> {
    const args = plainToClass(BoardMeetingFindManyArgs, request.query);
    return this.service.boardMeetings({
      ...args,
      select: {
        agenda: true,
        createdAt: true,
        description: true,
        endTime: true,
        id: true,
        location: true,
        minutes: true,
        startTime: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BoardMeeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async boardMeeting(
    @common.Param() params: BoardMeetingWhereUniqueInput
  ): Promise<BoardMeeting | null> {
    const result = await this.service.boardMeeting({
      where: params,
      select: {
        agenda: true,
        createdAt: true,
        description: true,
        endTime: true,
        id: true,
        location: true,
        minutes: true,
        startTime: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BoardMeeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBoardMeeting(
    @common.Param() params: BoardMeetingWhereUniqueInput,
    @common.Body() data: BoardMeetingUpdateInput
  ): Promise<BoardMeeting | null> {
    try {
      return await this.service.updateBoardMeeting({
        where: params,
        data: data,
        select: {
          agenda: true,
          createdAt: true,
          description: true,
          endTime: true,
          id: true,
          location: true,
          minutes: true,
          startTime: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BoardMeeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBoardMeeting(
    @common.Param() params: BoardMeetingWhereUniqueInput
  ): Promise<BoardMeeting | null> {
    try {
      return await this.service.deleteBoardMeeting({
        where: params,
        select: {
          agenda: true,
          createdAt: true,
          description: true,
          endTime: true,
          id: true,
          location: true,
          minutes: true,
          startTime: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
