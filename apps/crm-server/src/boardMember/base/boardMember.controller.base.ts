/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BoardMemberService } from "../boardMember.service";
import { BoardMemberCreateInput } from "./BoardMemberCreateInput";
import { BoardMember } from "./BoardMember";
import { BoardMemberFindManyArgs } from "./BoardMemberFindManyArgs";
import { BoardMemberWhereUniqueInput } from "./BoardMemberWhereUniqueInput";
import { BoardMemberUpdateInput } from "./BoardMemberUpdateInput";

export class BoardMemberControllerBase {
  constructor(protected readonly service: BoardMemberService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BoardMember })
  async createBoardMember(
    @common.Body() data: BoardMemberCreateInput
  ): Promise<BoardMember> {
    return await this.service.createBoardMember({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        joinDate: true,
        name: true,
        phone: true,
        role: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BoardMember] })
  @ApiNestedQuery(BoardMemberFindManyArgs)
  async boardMembers(@common.Req() request: Request): Promise<BoardMember[]> {
    const args = plainToClass(BoardMemberFindManyArgs, request.query);
    return this.service.boardMembers({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        joinDate: true,
        name: true,
        phone: true,
        role: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BoardMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async boardMember(
    @common.Param() params: BoardMemberWhereUniqueInput
  ): Promise<BoardMember | null> {
    const result = await this.service.boardMember({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        joinDate: true,
        name: true,
        phone: true,
        role: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BoardMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBoardMember(
    @common.Param() params: BoardMemberWhereUniqueInput,
    @common.Body() data: BoardMemberUpdateInput
  ): Promise<BoardMember | null> {
    try {
      return await this.service.updateBoardMember({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          joinDate: true,
          name: true,
          phone: true,
          role: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BoardMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBoardMember(
    @common.Param() params: BoardMemberWhereUniqueInput
  ): Promise<BoardMember | null> {
    try {
      return await this.service.deleteBoardMember({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          joinDate: true,
          name: true,
          phone: true,
          role: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
