/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Raffle as PrismaRaffle } from "@prisma/client";

export class RaffleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RaffleCountArgs, "select">): Promise<number> {
    return this.prisma.raffle.count(args);
  }

  async raffles<T extends Prisma.RaffleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RaffleFindManyArgs>
  ): Promise<PrismaRaffle[]> {
    return this.prisma.raffle.findMany<Prisma.RaffleFindManyArgs>(args);
  }
  async raffle<T extends Prisma.RaffleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RaffleFindUniqueArgs>
  ): Promise<PrismaRaffle | null> {
    return this.prisma.raffle.findUnique(args);
  }
  async createRaffle<T extends Prisma.RaffleCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RaffleCreateArgs>
  ): Promise<PrismaRaffle> {
    return this.prisma.raffle.create<T>(args);
  }
  async updateRaffle<T extends Prisma.RaffleUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RaffleUpdateArgs>
  ): Promise<PrismaRaffle> {
    return this.prisma.raffle.update<T>(args);
  }
  async deleteRaffle<T extends Prisma.RaffleDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RaffleDeleteArgs>
  ): Promise<PrismaRaffle> {
    return this.prisma.raffle.delete(args);
  }
}
