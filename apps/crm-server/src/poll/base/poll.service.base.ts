/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Poll as PrismaPoll, Vote as PrismaVote } from "@prisma/client";

export class PollServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PollCountArgs, "select">): Promise<number> {
    return this.prisma.poll.count(args);
  }

  async polls<T extends Prisma.PollFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PollFindManyArgs>
  ): Promise<PrismaPoll[]> {
    return this.prisma.poll.findMany<Prisma.PollFindManyArgs>(args);
  }
  async poll<T extends Prisma.PollFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PollFindUniqueArgs>
  ): Promise<PrismaPoll | null> {
    return this.prisma.poll.findUnique(args);
  }
  async createPoll<T extends Prisma.PollCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PollCreateArgs>
  ): Promise<PrismaPoll> {
    return this.prisma.poll.create<T>(args);
  }
  async updatePoll<T extends Prisma.PollUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PollUpdateArgs>
  ): Promise<PrismaPoll> {
    return this.prisma.poll.update<T>(args);
  }
  async deletePoll<T extends Prisma.PollDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PollDeleteArgs>
  ): Promise<PrismaPoll> {
    return this.prisma.poll.delete(args);
  }

  async findVotes(
    parentId: string,
    args: Prisma.VoteFindManyArgs
  ): Promise<PrismaVote[]> {
    return this.prisma.poll
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .votes(args);
  }
}
