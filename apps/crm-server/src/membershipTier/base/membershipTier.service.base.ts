/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MembershipTier as PrismaMembershipTier,
  Member as PrismaMember,
} from "@prisma/client";

export class MembershipTierServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MembershipTierCountArgs, "select">
  ): Promise<number> {
    return this.prisma.membershipTier.count(args);
  }

  async membershipTiers<T extends Prisma.MembershipTierFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MembershipTierFindManyArgs>
  ): Promise<PrismaMembershipTier[]> {
    return this.prisma.membershipTier.findMany<Prisma.MembershipTierFindManyArgs>(
      args
    );
  }
  async membershipTier<T extends Prisma.MembershipTierFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MembershipTierFindUniqueArgs>
  ): Promise<PrismaMembershipTier | null> {
    return this.prisma.membershipTier.findUnique(args);
  }
  async createMembershipTier<T extends Prisma.MembershipTierCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MembershipTierCreateArgs>
  ): Promise<PrismaMembershipTier> {
    return this.prisma.membershipTier.create<T>(args);
  }
  async updateMembershipTier<T extends Prisma.MembershipTierUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MembershipTierUpdateArgs>
  ): Promise<PrismaMembershipTier> {
    return this.prisma.membershipTier.update<T>(args);
  }
  async deleteMembershipTier<T extends Prisma.MembershipTierDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MembershipTierDeleteArgs>
  ): Promise<PrismaMembershipTier> {
    return this.prisma.membershipTier.delete(args);
  }

  async findMembers(
    parentId: string,
    args: Prisma.MemberFindManyArgs
  ): Promise<PrismaMember[]> {
    return this.prisma.membershipTier
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .members(args);
  }
}
