/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MemberService } from "../member.service";
import { MemberCreateInput } from "./MemberCreateInput";
import { Member } from "./Member";
import { MemberFindManyArgs } from "./MemberFindManyArgs";
import { MemberWhereUniqueInput } from "./MemberWhereUniqueInput";
import { MemberUpdateInput } from "./MemberUpdateInput";
import { CheckInFindManyArgs } from "../../checkIn/base/CheckInFindManyArgs";
import { CheckIn } from "../../checkIn/base/CheckIn";
import { CheckInWhereUniqueInput } from "../../checkIn/base/CheckInWhereUniqueInput";
import { MenteeFindManyArgs } from "../../mentee/base/MenteeFindManyArgs";
import { Mentee } from "../../mentee/base/Mentee";
import { MenteeWhereUniqueInput } from "../../mentee/base/MenteeWhereUniqueInput";
import { MentorFindManyArgs } from "../../mentor/base/MentorFindManyArgs";
import { Mentor } from "../../mentor/base/Mentor";
import { MentorWhereUniqueInput } from "../../mentor/base/MentorWhereUniqueInput";
import { TicketFindManyArgs } from "../../ticket/base/TicketFindManyArgs";
import { Ticket } from "../../ticket/base/Ticket";
import { TicketWhereUniqueInput } from "../../ticket/base/TicketWhereUniqueInput";

export class MemberControllerBase {
  constructor(protected readonly service: MemberService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Member })
  async createMember(@common.Body() data: MemberCreateInput): Promise<Member> {
    return await this.service.createMember({
      data: {
        ...data,

        membershipTier: data.membershipTier
          ? {
              connect: data.membershipTier,
            }
          : undefined,
      },
      select: {
        address: true,
        createdAt: true,
        email: true,
        id: true,

        membershipTier: {
          select: {
            id: true,
          },
        },

        mentorshipStatus: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Member] })
  @ApiNestedQuery(MemberFindManyArgs)
  async members(@common.Req() request: Request): Promise<Member[]> {
    const args = plainToClass(MemberFindManyArgs, request.query);
    return this.service.members({
      ...args,
      select: {
        address: true,
        createdAt: true,
        email: true,
        id: true,

        membershipTier: {
          select: {
            id: true,
          },
        },

        mentorshipStatus: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Member })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async member(
    @common.Param() params: MemberWhereUniqueInput
  ): Promise<Member | null> {
    const result = await this.service.member({
      where: params,
      select: {
        address: true,
        createdAt: true,
        email: true,
        id: true,

        membershipTier: {
          select: {
            id: true,
          },
        },

        mentorshipStatus: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Member })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMember(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() data: MemberUpdateInput
  ): Promise<Member | null> {
    try {
      return await this.service.updateMember({
        where: params,
        data: {
          ...data,

          membershipTier: data.membershipTier
            ? {
                connect: data.membershipTier,
              }
            : undefined,
        },
        select: {
          address: true,
          createdAt: true,
          email: true,
          id: true,

          membershipTier: {
            select: {
              id: true,
            },
          },

          mentorshipStatus: true,
          name: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Member })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMember(
    @common.Param() params: MemberWhereUniqueInput
  ): Promise<Member | null> {
    try {
      return await this.service.deleteMember({
        where: params,
        select: {
          address: true,
          createdAt: true,
          email: true,
          id: true,

          membershipTier: {
            select: {
              id: true,
            },
          },

          mentorshipStatus: true,
          name: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/checkIns")
  @ApiNestedQuery(CheckInFindManyArgs)
  async findCheckIns(
    @common.Req() request: Request,
    @common.Param() params: MemberWhereUniqueInput
  ): Promise<CheckIn[]> {
    const query = plainToClass(CheckInFindManyArgs, request.query);
    const results = await this.service.findCheckIns(params.id, {
      ...query,
      select: {
        checkInTime: true,
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        id: true,

        member: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/checkIns")
  async connectCheckIns(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: CheckInWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      checkIns: {
        connect: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/checkIns")
  async updateCheckIns(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: CheckInWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      checkIns: {
        set: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/checkIns")
  async disconnectCheckIns(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: CheckInWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      checkIns: {
        disconnect: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/mentees")
  @ApiNestedQuery(MenteeFindManyArgs)
  async findMentees(
    @common.Req() request: Request,
    @common.Param() params: MemberWhereUniqueInput
  ): Promise<Mentee[]> {
    const query = plainToClass(MenteeFindManyArgs, request.query);
    const results = await this.service.findMentees(params.id, {
      ...query,
      select: {
        assignedMentor: true,
        createdAt: true,
        id: true,

        member: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mentees")
  async connectMentees(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: MenteeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mentees: {
        connect: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mentees")
  async updateMentees(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: MenteeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mentees: {
        set: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mentees")
  async disconnectMentees(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: MenteeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mentees: {
        disconnect: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/mentors")
  @ApiNestedQuery(MentorFindManyArgs)
  async findMentors(
    @common.Req() request: Request,
    @common.Param() params: MemberWhereUniqueInput
  ): Promise<Mentor[]> {
    const query = plainToClass(MentorFindManyArgs, request.query);
    const results = await this.service.findMentors(params.id, {
      ...query,
      select: {
        active: true,
        createdAt: true,
        id: true,

        member: {
          select: {
            id: true,
          },
        },

        specialization: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mentors")
  async connectMentors(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: MentorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mentors: {
        connect: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mentors")
  async updateMentors(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: MentorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mentors: {
        set: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mentors")
  async disconnectMentors(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: MentorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mentors: {
        disconnect: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tickets")
  @ApiNestedQuery(TicketFindManyArgs)
  async findTickets(
    @common.Req() request: Request,
    @common.Param() params: MemberWhereUniqueInput
  ): Promise<Ticket[]> {
    const query = plainToClass(TicketFindManyArgs, request.query);
    const results = await this.service.findTickets(params.id, {
      ...query,
      select: {
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        id: true,
        issuedAt: true,

        member: {
          select: {
            id: true,
          },
        },

        price: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tickets")
  async connectTickets(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tickets: {
        connect: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tickets")
  async updateTickets(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tickets: {
        set: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tickets")
  async disconnectTickets(
    @common.Param() params: MemberWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tickets: {
        disconnect: body,
      },
    };
    await this.service.updateMember({
      where: params,
      data,
      select: { id: true },
    });
  }
}
