/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BoardMember } from "./BoardMember";
import { BoardMemberCountArgs } from "./BoardMemberCountArgs";
import { BoardMemberFindManyArgs } from "./BoardMemberFindManyArgs";
import { BoardMemberFindUniqueArgs } from "./BoardMemberFindUniqueArgs";
import { CreateBoardMemberArgs } from "./CreateBoardMemberArgs";
import { UpdateBoardMemberArgs } from "./UpdateBoardMemberArgs";
import { DeleteBoardMemberArgs } from "./DeleteBoardMemberArgs";
import { BoardMemberService } from "../boardMember.service";
@graphql.Resolver(() => BoardMember)
export class BoardMemberResolverBase {
  constructor(protected readonly service: BoardMemberService) {}

  async _boardMembersMeta(
    @graphql.Args() args: BoardMemberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BoardMember])
  async boardMembers(
    @graphql.Args() args: BoardMemberFindManyArgs
  ): Promise<BoardMember[]> {
    return this.service.boardMembers(args);
  }

  @graphql.Query(() => BoardMember, { nullable: true })
  async boardMember(
    @graphql.Args() args: BoardMemberFindUniqueArgs
  ): Promise<BoardMember | null> {
    const result = await this.service.boardMember(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BoardMember)
  async createBoardMember(
    @graphql.Args() args: CreateBoardMemberArgs
  ): Promise<BoardMember> {
    return await this.service.createBoardMember({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BoardMember)
  async updateBoardMember(
    @graphql.Args() args: UpdateBoardMemberArgs
  ): Promise<BoardMember | null> {
    try {
      return await this.service.updateBoardMember({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BoardMember)
  async deleteBoardMember(
    @graphql.Args() args: DeleteBoardMemberArgs
  ): Promise<BoardMember | null> {
    try {
      return await this.service.deleteBoardMember(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
