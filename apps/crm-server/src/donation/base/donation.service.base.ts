/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Donation as PrismaDonation } from "@prisma/client";

export class DonationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DonationCountArgs, "select">): Promise<number> {
    return this.prisma.donation.count(args);
  }

  async donations<T extends Prisma.DonationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DonationFindManyArgs>
  ): Promise<PrismaDonation[]> {
    return this.prisma.donation.findMany<Prisma.DonationFindManyArgs>(args);
  }
  async donation<T extends Prisma.DonationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DonationFindUniqueArgs>
  ): Promise<PrismaDonation | null> {
    return this.prisma.donation.findUnique(args);
  }
  async createDonation<T extends Prisma.DonationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DonationCreateArgs>
  ): Promise<PrismaDonation> {
    return this.prisma.donation.create<T>(args);
  }
  async updateDonation<T extends Prisma.DonationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DonationUpdateArgs>
  ): Promise<PrismaDonation> {
    return this.prisma.donation.update<T>(args);
  }
  async deleteDonation<T extends Prisma.DonationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DonationDeleteArgs>
  ): Promise<PrismaDonation> {
    return this.prisma.donation.delete(args);
  }
}
