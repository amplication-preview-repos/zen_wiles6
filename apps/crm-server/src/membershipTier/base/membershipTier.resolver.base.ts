/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MembershipTier } from "./MembershipTier";
import { MembershipTierCountArgs } from "./MembershipTierCountArgs";
import { MembershipTierFindManyArgs } from "./MembershipTierFindManyArgs";
import { MembershipTierFindUniqueArgs } from "./MembershipTierFindUniqueArgs";
import { CreateMembershipTierArgs } from "./CreateMembershipTierArgs";
import { UpdateMembershipTierArgs } from "./UpdateMembershipTierArgs";
import { DeleteMembershipTierArgs } from "./DeleteMembershipTierArgs";
import { MemberFindManyArgs } from "../../member/base/MemberFindManyArgs";
import { Member } from "../../member/base/Member";
import { MembershipTierService } from "../membershipTier.service";
@graphql.Resolver(() => MembershipTier)
export class MembershipTierResolverBase {
  constructor(protected readonly service: MembershipTierService) {}

  async _membershipTiersMeta(
    @graphql.Args() args: MembershipTierCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MembershipTier])
  async membershipTiers(
    @graphql.Args() args: MembershipTierFindManyArgs
  ): Promise<MembershipTier[]> {
    return this.service.membershipTiers(args);
  }

  @graphql.Query(() => MembershipTier, { nullable: true })
  async membershipTier(
    @graphql.Args() args: MembershipTierFindUniqueArgs
  ): Promise<MembershipTier | null> {
    const result = await this.service.membershipTier(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MembershipTier)
  async createMembershipTier(
    @graphql.Args() args: CreateMembershipTierArgs
  ): Promise<MembershipTier> {
    return await this.service.createMembershipTier({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MembershipTier)
  async updateMembershipTier(
    @graphql.Args() args: UpdateMembershipTierArgs
  ): Promise<MembershipTier | null> {
    try {
      return await this.service.updateMembershipTier({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MembershipTier)
  async deleteMembershipTier(
    @graphql.Args() args: DeleteMembershipTierArgs
  ): Promise<MembershipTier | null> {
    try {
      return await this.service.deleteMembershipTier(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Member], { name: "members" })
  async findMembers(
    @graphql.Parent() parent: MembershipTier,
    @graphql.Args() args: MemberFindManyArgs
  ): Promise<Member[]> {
    const results = await this.service.findMembers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
