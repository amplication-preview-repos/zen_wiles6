/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Mentee as PrismaMentee,
  Member as PrismaMember,
} from "@prisma/client";

export class MenteeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MenteeCountArgs, "select">): Promise<number> {
    return this.prisma.mentee.count(args);
  }

  async mentees<T extends Prisma.MenteeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenteeFindManyArgs>
  ): Promise<PrismaMentee[]> {
    return this.prisma.mentee.findMany<Prisma.MenteeFindManyArgs>(args);
  }
  async mentee<T extends Prisma.MenteeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenteeFindUniqueArgs>
  ): Promise<PrismaMentee | null> {
    return this.prisma.mentee.findUnique(args);
  }
  async createMentee<T extends Prisma.MenteeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenteeCreateArgs>
  ): Promise<PrismaMentee> {
    return this.prisma.mentee.create<T>(args);
  }
  async updateMentee<T extends Prisma.MenteeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenteeUpdateArgs>
  ): Promise<PrismaMentee> {
    return this.prisma.mentee.update<T>(args);
  }
  async deleteMentee<T extends Prisma.MenteeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenteeDeleteArgs>
  ): Promise<PrismaMentee> {
    return this.prisma.mentee.delete(args);
  }

  async getMember(parentId: string): Promise<PrismaMember | null> {
    return this.prisma.mentee
      .findUnique({
        where: { id: parentId },
      })
      .member();
  }
}
