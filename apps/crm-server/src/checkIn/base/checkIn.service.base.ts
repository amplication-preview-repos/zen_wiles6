/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CheckIn as PrismaCheckIn,
  Event as PrismaEvent,
  Member as PrismaMember,
} from "@prisma/client";

export class CheckInServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CheckInCountArgs, "select">): Promise<number> {
    return this.prisma.checkIn.count(args);
  }

  async checkIns<T extends Prisma.CheckInFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CheckInFindManyArgs>
  ): Promise<PrismaCheckIn[]> {
    return this.prisma.checkIn.findMany<Prisma.CheckInFindManyArgs>(args);
  }
  async checkIn<T extends Prisma.CheckInFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CheckInFindUniqueArgs>
  ): Promise<PrismaCheckIn | null> {
    return this.prisma.checkIn.findUnique(args);
  }
  async createCheckIn<T extends Prisma.CheckInCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CheckInCreateArgs>
  ): Promise<PrismaCheckIn> {
    return this.prisma.checkIn.create<T>(args);
  }
  async updateCheckIn<T extends Prisma.CheckInUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CheckInUpdateArgs>
  ): Promise<PrismaCheckIn> {
    return this.prisma.checkIn.update<T>(args);
  }
  async deleteCheckIn<T extends Prisma.CheckInDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CheckInDeleteArgs>
  ): Promise<PrismaCheckIn> {
    return this.prisma.checkIn.delete(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.checkIn
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }

  async getMember(parentId: string): Promise<PrismaMember | null> {
    return this.prisma.checkIn
      .findUnique({
        where: { id: parentId },
      })
      .member();
  }
}
