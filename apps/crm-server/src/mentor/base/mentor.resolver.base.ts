/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Mentor } from "./Mentor";
import { MentorCountArgs } from "./MentorCountArgs";
import { MentorFindManyArgs } from "./MentorFindManyArgs";
import { MentorFindUniqueArgs } from "./MentorFindUniqueArgs";
import { CreateMentorArgs } from "./CreateMentorArgs";
import { UpdateMentorArgs } from "./UpdateMentorArgs";
import { DeleteMentorArgs } from "./DeleteMentorArgs";
import { Member } from "../../member/base/Member";
import { MentorService } from "../mentor.service";
@graphql.Resolver(() => Mentor)
export class MentorResolverBase {
  constructor(protected readonly service: MentorService) {}

  async _mentorsMeta(
    @graphql.Args() args: MentorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Mentor])
  async mentors(@graphql.Args() args: MentorFindManyArgs): Promise<Mentor[]> {
    return this.service.mentors(args);
  }

  @graphql.Query(() => Mentor, { nullable: true })
  async mentor(
    @graphql.Args() args: MentorFindUniqueArgs
  ): Promise<Mentor | null> {
    const result = await this.service.mentor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Mentor)
  async createMentor(@graphql.Args() args: CreateMentorArgs): Promise<Mentor> {
    return await this.service.createMentor({
      ...args,
      data: {
        ...args.data,

        member: args.data.member
          ? {
              connect: args.data.member,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Mentor)
  async updateMentor(
    @graphql.Args() args: UpdateMentorArgs
  ): Promise<Mentor | null> {
    try {
      return await this.service.updateMentor({
        ...args,
        data: {
          ...args.data,

          member: args.data.member
            ? {
                connect: args.data.member,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Mentor)
  async deleteMentor(
    @graphql.Args() args: DeleteMentorArgs
  ): Promise<Mentor | null> {
    try {
      return await this.service.deleteMentor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Member, {
    nullable: true,
    name: "member",
  })
  async getMember(@graphql.Parent() parent: Mentor): Promise<Member | null> {
    const result = await this.service.getMember(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
