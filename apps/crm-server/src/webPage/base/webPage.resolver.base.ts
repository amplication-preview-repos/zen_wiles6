/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WebPage } from "./WebPage";
import { WebPageCountArgs } from "./WebPageCountArgs";
import { WebPageFindManyArgs } from "./WebPageFindManyArgs";
import { WebPageFindUniqueArgs } from "./WebPageFindUniqueArgs";
import { CreateWebPageArgs } from "./CreateWebPageArgs";
import { UpdateWebPageArgs } from "./UpdateWebPageArgs";
import { DeleteWebPageArgs } from "./DeleteWebPageArgs";
import { WebPageService } from "../webPage.service";
@graphql.Resolver(() => WebPage)
export class WebPageResolverBase {
  constructor(protected readonly service: WebPageService) {}

  async _webPagesMeta(
    @graphql.Args() args: WebPageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WebPage])
  async webPages(
    @graphql.Args() args: WebPageFindManyArgs
  ): Promise<WebPage[]> {
    return this.service.webPages(args);
  }

  @graphql.Query(() => WebPage, { nullable: true })
  async webPage(
    @graphql.Args() args: WebPageFindUniqueArgs
  ): Promise<WebPage | null> {
    const result = await this.service.webPage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WebPage)
  async createWebPage(
    @graphql.Args() args: CreateWebPageArgs
  ): Promise<WebPage> {
    return await this.service.createWebPage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => WebPage)
  async updateWebPage(
    @graphql.Args() args: UpdateWebPageArgs
  ): Promise<WebPage | null> {
    try {
      return await this.service.updateWebPage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WebPage)
  async deleteWebPage(
    @graphql.Args() args: DeleteWebPageArgs
  ): Promise<WebPage | null> {
    try {
      return await this.service.deleteWebPage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
