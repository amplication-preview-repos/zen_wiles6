/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MembershipTierService } from "../membershipTier.service";
import { MembershipTierCreateInput } from "./MembershipTierCreateInput";
import { MembershipTier } from "./MembershipTier";
import { MembershipTierFindManyArgs } from "./MembershipTierFindManyArgs";
import { MembershipTierWhereUniqueInput } from "./MembershipTierWhereUniqueInput";
import { MembershipTierUpdateInput } from "./MembershipTierUpdateInput";
import { MemberFindManyArgs } from "../../member/base/MemberFindManyArgs";
import { Member } from "../../member/base/Member";
import { MemberWhereUniqueInput } from "../../member/base/MemberWhereUniqueInput";

export class MembershipTierControllerBase {
  constructor(protected readonly service: MembershipTierService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MembershipTier })
  async createMembershipTier(
    @common.Body() data: MembershipTierCreateInput
  ): Promise<MembershipTier> {
    return await this.service.createMembershipTier({
      data: data,
      select: {
        createdAt: true,
        description: true,
        fee: true,
        id: true,
        tierName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MembershipTier] })
  @ApiNestedQuery(MembershipTierFindManyArgs)
  async membershipTiers(
    @common.Req() request: Request
  ): Promise<MembershipTier[]> {
    const args = plainToClass(MembershipTierFindManyArgs, request.query);
    return this.service.membershipTiers({
      ...args,
      select: {
        createdAt: true,
        description: true,
        fee: true,
        id: true,
        tierName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MembershipTier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async membershipTier(
    @common.Param() params: MembershipTierWhereUniqueInput
  ): Promise<MembershipTier | null> {
    const result = await this.service.membershipTier({
      where: params,
      select: {
        createdAt: true,
        description: true,
        fee: true,
        id: true,
        tierName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MembershipTier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMembershipTier(
    @common.Param() params: MembershipTierWhereUniqueInput,
    @common.Body() data: MembershipTierUpdateInput
  ): Promise<MembershipTier | null> {
    try {
      return await this.service.updateMembershipTier({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          fee: true,
          id: true,
          tierName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MembershipTier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMembershipTier(
    @common.Param() params: MembershipTierWhereUniqueInput
  ): Promise<MembershipTier | null> {
    try {
      return await this.service.deleteMembershipTier({
        where: params,
        select: {
          createdAt: true,
          description: true,
          fee: true,
          id: true,
          tierName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/members")
  @ApiNestedQuery(MemberFindManyArgs)
  async findMembers(
    @common.Req() request: Request,
    @common.Param() params: MembershipTierWhereUniqueInput
  ): Promise<Member[]> {
    const query = plainToClass(MemberFindManyArgs, request.query);
    const results = await this.service.findMembers(params.id, {
      ...query,
      select: {
        address: true,
        createdAt: true,
        email: true,
        id: true,

        membershipTier: {
          select: {
            id: true,
          },
        },

        mentorshipStatus: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/members")
  async connectMembers(
    @common.Param() params: MembershipTierWhereUniqueInput,
    @common.Body() body: MemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      members: {
        connect: body,
      },
    };
    await this.service.updateMembershipTier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/members")
  async updateMembers(
    @common.Param() params: MembershipTierWhereUniqueInput,
    @common.Body() body: MemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      members: {
        set: body,
      },
    };
    await this.service.updateMembershipTier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/members")
  async disconnectMembers(
    @common.Param() params: MembershipTierWhereUniqueInput,
    @common.Body() body: MemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      members: {
        disconnect: body,
      },
    };
    await this.service.updateMembershipTier({
      where: params,
      data,
      select: { id: true },
    });
  }
}
