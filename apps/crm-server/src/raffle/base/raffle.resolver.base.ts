/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Raffle } from "./Raffle";
import { RaffleCountArgs } from "./RaffleCountArgs";
import { RaffleFindManyArgs } from "./RaffleFindManyArgs";
import { RaffleFindUniqueArgs } from "./RaffleFindUniqueArgs";
import { CreateRaffleArgs } from "./CreateRaffleArgs";
import { UpdateRaffleArgs } from "./UpdateRaffleArgs";
import { DeleteRaffleArgs } from "./DeleteRaffleArgs";
import { RaffleService } from "../raffle.service";
@graphql.Resolver(() => Raffle)
export class RaffleResolverBase {
  constructor(protected readonly service: RaffleService) {}

  async _rafflesMeta(
    @graphql.Args() args: RaffleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Raffle])
  async raffles(@graphql.Args() args: RaffleFindManyArgs): Promise<Raffle[]> {
    return this.service.raffles(args);
  }

  @graphql.Query(() => Raffle, { nullable: true })
  async raffle(
    @graphql.Args() args: RaffleFindUniqueArgs
  ): Promise<Raffle | null> {
    const result = await this.service.raffle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Raffle)
  async createRaffle(@graphql.Args() args: CreateRaffleArgs): Promise<Raffle> {
    return await this.service.createRaffle({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Raffle)
  async updateRaffle(
    @graphql.Args() args: UpdateRaffleArgs
  ): Promise<Raffle | null> {
    try {
      return await this.service.updateRaffle({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Raffle)
  async deleteRaffle(
    @graphql.Args() args: DeleteRaffleArgs
  ): Promise<Raffle | null> {
    try {
      return await this.service.deleteRaffle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
